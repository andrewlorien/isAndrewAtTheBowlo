AWSTemplateFormatVersion: "2010-09-09"
Description: "An API so Andrew can tell the world if he's at the bowlo (or not)"

Parameters:
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "sayifandrewisatthebowlo"

  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "telltheworld"
  DomainName:
    Description: DNS name and S3 website bucket name
    Default: isandrewatthebowlo.com
    Type: String

  SSLarn:
    Description: SSL certificate created by isAndrewAtTheBowlo_SSL.yaml (must be in us-east-1)
    Default: arn:aws:acm:us-east-1:166095187240:certificate/28563903-ee35-4da5-ac6f-e7c9c3dc87ca
    Type: String
    
# TODO : add Domain Name ( console: API gateway | Custom Domain Names ) 
# and do you need the path mappings??
Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "isandrewatthebowlo-api"
      Description: "Andrew's phone can tell me whether he's at the bowlo (or not)"

  domainName:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: 
        Fn::Join: 
          - ""
          - 
            - "api."
            - Ref: DomainName
      CertificateArn: !Ref SSLarn      
      
  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref "apiGateway"

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: !Ref "apiGatewayStageName"

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            return {
              'body': 'Hello there {0}'.format(event['requestContext']['identity']['sourceIp']),
              'headers': {
                'Content-Type': 'text/plain'
              },
              'statusCode': 200
            }
      Description: "My function"
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "index.telltheworld"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python2.7"
      Timeout: 10
# i think i should add "concurrency: 1" because i only want to call this thing once at a time      

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/"

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
          PolicyName: "lambda"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:ListBucket"
                Effect: "Allow"
                Resource:
                  Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref DomainName
              - Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Effect: "Allow"
                Resource:
                  Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref DomainName
          PolicyName: "S3"

  isandrewatthebowloBucketLambdaPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref DomainName
      PolicyDocument:
        Id: isandrewatthebowloLambdaPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: AddLambdaPerm
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:DeleteObject'
            Resource: 
            Fn::Join: 
                - ""
                - 
                - "arn:aws:s3:::"
                - Ref: "DomainName"
                - "/*"          
        - Sid: AddLambdaPerm
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
            - 's3:ListBucket'
            Resource: 
            Fn::Join: 
                - ""
                - 
                - "arn:aws:s3:::"
                - Ref: "DomainName"
          
  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}" 
    # that needed a bit more clicking to get it right.
    # but i'm sure i could export it out of CF and it'll work

  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"
